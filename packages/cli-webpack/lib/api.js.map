{"version":3,"sources":["../src/api.js"],"names":["API","mode","options","inspect","formatOptions","pkg","resolvePackage","plugins","resolvePlugins","dir","path","resolve","context","baseURL","chainWebpack","easyConfig","replace","config","fs","existsSync","require","e","logger","error","map","id","err","WebpackChain","plugin","use","toConfig","api","env","argv","callback","open","port","report","sourcemap"],"mappings":"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","sourcesContent":["import path from 'path';\r\nimport WebpackChain from 'webpack-chain';\r\nimport { fs, logger, parallelToSerial } from '@chrissong/cli-utils';\r\n\r\nexport default class API {\r\n  /**\r\n   * @param {String} mode 当前执行模式\r\n   * @param {Object} options\r\n   * {\r\n   *   env, // 环境变量\r\n   *   argv, // 命令行参数\r\n   *   easyConfig, // easy.config.js中的配置对象\r\n   *   context // 当前执行的路径，即webpack的context属性，也是当前运行的cwd\r\n   * }\r\n   * @param {Boolean} inspect 是否为inspect模式\r\n   */\r\n  constructor(mode, options, inspect) {\r\n    this.mode = mode;\r\n    this.inspect = inspect;\r\n    this.options = this.formatOptions(options);\r\n    this.pkg = this.resolvePackage();\r\n    this.plugins = this.resolvePlugins();\r\n  }\r\n\r\n  /**\r\n   * 环境变量\r\n   */\r\n  get env() {\r\n    return this.options.env;\r\n  }\r\n\r\n  /**\r\n   * 命令行参数\r\n   */\r\n  get argv() {\r\n    const argv = this.options.argv;\r\n    return {\r\n      ...argv,\r\n      open: argv.open || false,\r\n      port: argv.port || 8080,\r\n      report: argv.report || false,\r\n      sourcemap: argv.sourcemap || false\r\n    };\r\n  }\r\n\r\n  /**\r\n   * easyConfig配置文件对象\r\n   */\r\n  get easyConfig() {\r\n    return this.options.easyConfig;\r\n  }\r\n\r\n  /**\r\n   * 当前程序执行路径\r\n   */\r\n  get context() {\r\n    return this.options.context;\r\n  }\r\n\r\n  /**\r\n   * resolve路径\r\n   * @param {String} dir\r\n   */\r\n  resolve(dir) {\r\n    return path.resolve(this.context, dir);\r\n  }\r\n\r\n  /**\r\n   * 格式化options参数\r\n   * @param {Object} options\r\n   */\r\n  formatOptions(options) {\r\n    const { baseURL = '', chainWebpack, ...easyConfig } = options;\r\n    return {\r\n      ...options,\r\n      easyConfig: {\r\n        ...easyConfig,\r\n        baseURL: baseURL.replace(/^\\/+|\\/+$/g, ''),\r\n        chainWebpack: (config) => {\r\n          if (typeof chainWebpack === 'function') chainWebpack(config);\r\n          return config;\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 获取package.json信息\r\n   */\r\n  resolvePackage() {\r\n    const pkg = this.resolve('package.json');\r\n    if (fs.existsSync(pkg)) {\r\n      try {\r\n        return require(pkg);\r\n      } catch (e) {\r\n        logger.error(`读取 ${pkg} 失败`);\r\n        return {};\r\n      }\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * 读取package.json中的插件\r\n   */\r\n  resolvePlugins() {\r\n    const plugins = ['./config/base', './config/dev', './config/prod'];\r\n    return plugins.map((id) => {\r\n      try {\r\n        return require(id);\r\n      } catch (err) {\r\n        logger.error(`插件 ${id} 加载失败`);\r\n        throw err;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取webpack config\r\n   */\r\n  async resolveWebpackConfig() {\r\n    const config = new WebpackChain();\r\n    const { chainWebpack } = this.easyConfig;\r\n    // 生成webpack配置\r\n    await parallelToSerial(this.plugins.map((plugin) => this.use(config)(plugin.default)));\r\n\r\n    return chainWebpack(config).toConfig(); // 加载配置项的webpack 配置\r\n  }\r\n\r\n  /**\r\n   * 注册执行插件\r\n   * @param {WebpackChain} config\r\n   */\r\n  use(config) {\r\n    return (plugin) => {\r\n      const api = {\r\n        env: this.env,\r\n        pkg: this.pkg,\r\n        mode: this.mode,\r\n        argv: this.argv,\r\n        inspect: this.inspect,\r\n        easyConfig: this.easyConfig,\r\n        context: this.context,\r\n        resolve: (dir) => this.resolve(dir),\r\n        chainWebpack: (callback) => callback(config)\r\n      };\r\n      debugger;\r\n      return () => plugin(api);\r\n    };\r\n  }\r\n}\r\n"],"file":"api.js"}