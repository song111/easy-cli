{"version":3,"sources":["../src/api.js"],"names":["API","mode","options","inspect","formatOptions","pkg","resolvePackage","plugins","resolvePlugins","dir","path","resolve","context","baseURL","chainWebpack","easyConfig","replace","config","fs","existsSync","require","e","logger","error","map","id","err","WebpackChain","use","toConfig","plugin","api","env","argv","callback","open","port","report","sourcemap","version"],"mappings":"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","sourcesContent":["import path from 'path';\nimport WebpackChain from 'webpack-chain';\nimport { fs, logger, parallelToSerial } from '@chrissong/cli-utils';\n\nexport default class API {\n  /**\n   * @param {String} mode 当前执行模式\n   * @param {Object} options\n   * {\n   *   env, // 环境变量\n   *   argv, // 命令行参数\n   *   easyConfig, // easy.config.js中的配置对象\n   *   context // 当前执行的路径，即webpack的context属性，也是当前运行的cwd\n   * }\n   * @param {Boolean} inspect 是否为inspect模式\n   */\n  constructor(mode, options, inspect) {\n    this.mode = mode;\n    this.options = this.formatOptions(options);\n    debugger;\n    this.pkg = this.resolvePackage();\n    this.plugins = this.resolvePlugins();\n  }\n\n  /**\n   * 环境变量\n   */\n  get env() {\n    return this.options.env;\n  }\n\n  /**\n   * 命令行参数\n   */\n  get argv() {\n    const argv = this.options.argv;\n    return {\n      ...argv,\n      open: argv.open || false,\n      port: argv.port || 8080,\n      report: argv.report || false,\n      sourcemap: argv.sourcemap || false\n    };\n  }\n\n  /**\n   * easyConfig配置文件对象\n   */\n  get easyConfig() {\n    return this.options.easyConfig;\n  }\n\n  /**\n   * 当前程序执行路径\n   */\n  get context() {\n    return this.options.context;\n  }\n\n  /**\n   * 版本号\n   */\n  get version() {\n    return version;\n  }\n\n  /**\n   * resolve路径\n   * @param {String} dir\n   */\n  resolve(dir) {\n    return path.resolve(this.context, dir);\n  }\n\n  /**\n   * 格式化options参数\n   * @param {Object} options\n   */\n  formatOptions(options) {\n    const { baseURL = '', chainWebpack, ...easyConfig } = options;\n    debugger;\n    return {\n      ...options,\n      easyConfig: {\n        ...easyConfig,\n        baseURL: baseURL.replace(/^\\/+|\\/+$/g, ''),\n        chainWebpack: (config) => {\n          if (typeof chainWebpack === 'function') chainWebpack(config);\n          return config;\n        }\n      }\n    };\n  }\n\n  /**\n   * 获取package.json信息\n   */\n  resolvePackage() {\n    const pkg = this.resolve('package.json');\n    if (fs.existsSync(pkg)) {\n      try {\n        return require(pkg);\n      } catch (e) {\n        logger.error(`读取 ${pkg} 失败`);\n        return {};\n      }\n    }\n    return {};\n  }\n\n  /**\n   * 读取package.json中的插件\n   */\n  resolvePlugins() {\n    const plugins = ['./webpack/webpack.config', './webpack/webpack.config.dev', './webpack/webpack.config.prod'];\n    return plugins.map((id) => {\n      try {\n        return require(id);\n      } catch (err) {\n        logger.error(`插件 ${id} 加载失败`);\n        throw err;\n      }\n    });\n  }\n\n  /**\n   * 获取webpack config\n   */\n  async resolveWebpackConfig() {\n    const config = new WebpackChain();\n    const { chainWebpack } = this.easyConfig;\n    // 生成webpack配置\n    await parallelToSerial(this.plugins.map(this.use(config)));\n\n    return chainWebpack(config).toConfig(); // 加载配置项的webpack 配置\n  }\n\n  /**\n   * 注册执行插件\n   * @param {WebpackChain} config\n   */\n  use(config) {\n    return (plugin) => {\n      const api = {\n        env: () => this.env,\n        pkg: () => this.pkg,\n        mode: () => this.mode,\n        argv: () => this.argv,\n        easyConfig: () => this.easyConfig,\n        context: () => this.context,\n        resolve: (dir) => this.resolve(dir),\n        chainWebpack: (callback) => callback(config)\n      };\n      return () => plugin(api);\n    };\n  }\n}\n"],"file":"api.js"}