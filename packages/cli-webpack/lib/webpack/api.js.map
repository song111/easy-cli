{"version":3,"sources":["../../src/webpack/api.js"],"names":["API","mode","options","plugins","resolvePlugins","dir","path","resolve","context","concat","map","id","opts","apply","require","err","logger","error","config","WebpackChain","use","toConfig","api","env","pkg","argv","setup","chainWebpack","callback","open","port","report","sourcemap"],"mappings":"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","sourcesContent":["import path from 'path'\nimport WebpackChain from 'webpack-chain'\nimport { logger } from '../utils'\nimport { parallelToSerial } from '@chrissong/utils'\n\nexport default class API {\n  /**\n   * 插件api\n   * @param {String} cmd 当前执行的命令\n   * @param {Object} options\n   * {\n   *   env, // 环境变量\n   *   argv, // 命令行参数\n   *   setup, // setup.config.js中的配置对象\n   *   context // 当前执行的路径，即webpack的context属性，也是当前运行的cwd\n   * }\n   */\n  constructor (mode, options) {\n    this.mode = mode\n    this.options = options\n    this.plugins = this.resolvePlugins()\n  }\n\n  /**\n   * 环境变量\n   */\n  get env () {\n    return this.options.env\n  }\n\n  /**\n   * 命令行参数\n   */\n  get argv () {\n    const argv = this.options.argv\n    return {\n      ...argv,\n      open: argv.open || false,\n      port: argv.port || 8080,\n      report: argv.report || false,\n      sourcemap: argv.sourcemap || false\n    }\n  }\n\n  /**\n   * setup配置文件对象\n   */\n  get setup () {\n    return this.options.setup\n  }\n\n  /**\n   * 当前程序执行路径\n   * 等同于process.cwd和webpack的context路径\n   */\n  get context () {\n    return this.options.context\n  }\n\n  /**\n   * resolve路径\n   * @param {String} dir\n   */\n  resolve (dir) {\n    return path.resolve(this.context, dir)\n  }\n\n  /**\n   * 加载插件\n   */\n  resolvePlugins () {\n    const plugins = [['./webpack.config'], ['./webpack.config.dev'], ['./webpack.config.prod']]\n\n    return plugins.concat([]).map(([id, opts]) => {\n      try {\n        return { id, apply: require(id), opts }\n      } catch (err) {\n        logger.error(`插件 ${id} 加载失败`)\n        throw err\n      }\n    })\n  }\n\n  /**\n   * 获取webpack config\n   */\n  async resolveWebpackConfig () {\n    const config = new WebpackChain()\n    //  对于webpackconfig任务需要串行执行\n    await parallelToSerial(this.plugins.map(this.use(config)))\n\n    return config.toConfig()\n  }\n\n  /**\n   * 注册执行插件\n   * @param {WebpackChain} config\n   */\n  use (config) {\n    return ({ id, apply }) => {\n      const api = {\n        env: () => this.env,\n        pkg: () => this.pkg,\n        mode: () => this.mode,\n        argv: () => this.argv,\n        setup: () => this.setup,\n        context: () => this.context,\n        resolve: dir => this.resolve(dir),\n        chainWebpack: callback => callback(config)\n      }\n      return () => apply(api)\n    }\n  }\n}\n"],"file":"api.js"}