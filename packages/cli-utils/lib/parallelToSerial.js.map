{"version":3,"sources":["../src/parallelToSerial.js"],"names":["items","length","Promise","resolve","reject","res","next","i","slice","all","map","item","then","value","push","err"],"mappings":";;;;;;;;;;;AAAA;;;;;;;eAOe,kBAACA,KAAD,EAAuB;AAAA,MAAfC,MAAe,uEAAN,CAAM;AACpC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,GAAG,GAAG,EAAZ;;AACA,aAASC,IAAT,CAAeC,CAAf,EAAkB;AAChB,UAAMC,KAAK,GAAGR,KAAK,CAACQ,KAAN,CAAYD,CAAZ,EAAeA,CAAC,GAAGN,MAAnB,CAAd;AACAM,MAAAA,CAAC,IAAIN,MAAL,CAFgB,CAGhB;;AACA,UAAIO,KAAK,CAACP,MAAV,EAAkB;AAChB;AACAC,QAAAA,OAAO,CAACO,GAAR,CAAYD,KAAK,CAACE,GAAN,CAAU,UAACC,IAAD;AAAA,iBAAUA,IAAI,EAAd;AAAA,SAAV,CAAZ,EACGC,IADH,CACQ,UAACC,KAAD,EAAW;AACfR,UAAAA,GAAG,CAACS,IAAJ,OAAAT,GAAG,sCAASQ,KAAT,EAAH;AACAP,UAAAA,IAAI,CAACC,CAAD,CAAJ;AACD,SAJH,WAKS,UAACQ,GAAD;AAAA,iBAASX,MAAM,CAACW,GAAD,CAAf;AAAA,SALT;AAMD,OARD,MAQO;AACLZ,QAAAA,OAAO,CAACE,GAAD,CAAP;AACD;AACF;;AACDC,IAAAA,IAAI,CAAC,CAAD,CAAJ;AACD,GAnBM,CAAP;AAoBD,C","sourcesContent":["/**\n * 把任务集合转换为串行任务\n * 串行执行时可指定每次同时(并发)可执行任务的条数\n * @param {Array} items 任务列表\n * @param {Number} length 每次并发任务的条数\n * @return {Promise<Array>} Promise对象按切片执行结果\n */\nexport default (items, length = 1) => {\n  return new Promise((resolve, reject) => {\n    const res = [];\n    function next (i) {\n      const slice = items.slice(i, i + length);\n      i += length;\n      // 如果数据执行完之后就直接返回\n      if (slice.length) {\n        // 执行处理逻辑\n        Promise.all(slice.map((item) => item()))\n          .then((value) => {\n            res.push(...value);\n            next(i);\n          })\n          .catch((err) => reject(err));\n      } else {\n        resolve(res);\n      }\n    }\n    next(0);\n  });\n};\n"],"file":"parallelToSerial.js"}