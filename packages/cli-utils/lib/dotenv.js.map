{"version":3,"sources":["../src/dotenv.js"],"names":["mode","env","expand","parse","file","filename","path","resolve","process","cwd","fs","existsSync","dotenv","readFileSync","encoding","err","logger","error","Object","keys","forEach","key","interpolate","value","matches","match","reduce","envs","parts","exec","prefix","replacePart","replace","substring","length","prototype","hasOwnProperty","call"],"mappings":"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","sourcesContent":["import path from 'path'\nimport fs from 'fs-extra'\nimport dotenv from 'dotenv'\nimport * as logger from './logger'\n\n/**\n * 获取环境变量\n * @param {*} mode\n * @param {*} env\n */\nexport default (mode, env) => {\n  if (mode) {\n    return {\n      ...expand(parse('.env')),\n      ...expand(parse('.env.local')),\n      ...expand(parse(`.env.${mode}`)),\n      ...expand(parse(`.env.${mode}.local`)),\n      ...expand(env)\n    }\n  } else {\n    return {\n      ...expand(parse('.env')),\n      ...expand(parse('.env.local')),\n      ...expand(env)\n    }\n  }\n}\n\n/**\n   * 解析.env文件\n   * @param {*} file\n   */\nfunction parse (file) {\n  // 从.env文件读取环境变量\n  const filename = path.resolve(process.cwd(), file)\n  if (!fs.existsSync(filename)) return {}\n  try {\n    return dotenv.parse(fs.readFileSync(filename, { encoding: 'utf-8' }))\n  } catch (err) {\n    logger.error(`${filename} 文件解析错误`)\n    return {}\n  }\n}\n\n/**\n * 解析env变量中的为环境变量值\n * @param {*} env\n */\nfunction expand (env = {}) {\n  Object.keys(env).forEach(key => {\n    env[key] = interpolate(env[key])\n    process.env[key] = env[key]\n  })\n\n  return env\n}\n\n/**\n   * 解析值\n   * @param {*} value\n   *  @param {*} env\n   */\nfunction interpolate (value, env) {\n  const matches = value.match(/(.?\\${?(?:[a-zA-Z0-9_]+)?}?)/g) || []\n\n  return matches.reduce((envs, match) => {\n    const parts = /(.?)\\${?([a-zA-Z0-9_]+)?}?/g.exec(match)\n    const prefix = parts[1]\n\n    if (prefix === '\\\\') {\n      const replacePart = parts[0]\n      return envs.replace(replacePart, replacePart.replace('\\\\$', '$'))\n    } else {\n      const key = parts[2]\n      const replacePart = parts[0].substring(prefix.length)\n      const value = Object.prototype.hasOwnProperty.call(process.env, key) ? process.env[key] : env[key] || ''\n      return envs.replace(replacePart, interpolate(value))\n    }\n  }, value)\n}\n"],"file":"dotenv.js"}