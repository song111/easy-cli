{"version":3,"sources":["../../src/init/selectTemplate.js"],"names":["templateRepo","templateBranch","base","getTemplateQues","answers","inquirer","prompt","name","message","type","when","isHasState","choices","getTemplateBranchByParams","params","isHasTs","stateType"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEO,MAAMA,YAAY,GAAG,8CAArB;;AAEA,MAAMC,cAAc,GAAG;AAC5BC,EAAAA,IAAI,EAAE,MADsB;AAE5B,aAAW,SAFiB;AAG5B,mBAAiB,eAHW;AAI5B,gBAAc,YAJc;AAK5B,eAAa,WALe;AAM5B,kBAAgB;AANY,CAAvB,C,CASP;;;;AACO,MAAMC,eAAe,GAAG,YAAY;AACzC,QAAMC,OAAO,GAAG,MAAMC,kBAASC,MAAT,CAAgB,CACpC;AACEC,IAAAA,IAAI,EAAE,SADR;AAEEC,IAAAA,OAAO,EAAE,iBAFX;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADoC,EAMpC;AACEF,IAAAA,IAAI,EAAE,YADR;AAEEC,IAAAA,OAAO,EAAE,aAFX;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANoC,EAWpC;AACEF,IAAAA,IAAI,EAAE,WADR;AAEEG,IAAAA,IAAI,EAAGN,OAAD,IAAa;AACjB,aAAOA,OAAO,CAACO,UAAf;AACD,KAJH;AAKEH,IAAAA,OAAO,EAAE,WALX;AAMEC,IAAAA,IAAI,EAAE,MANR;AAOEG,IAAAA,OAAO,EAAE,CAAC,OAAD,EAAU,MAAV;AAPX,GAXoC,EAoBpC;AACEL,IAAAA,IAAI,EAAE,YADR;AAEEC,IAAAA,OAAO,EAAE,SAFX;AAGEC,IAAAA,IAAI,EAAE,MAHR;AAIEG,IAAAA,OAAO,EAAE,CAAC,MAAD,EAAS,KAAT;AAJX,GApBoC,CAAhB,CAAtB;AA4BA,SAAOR,OAAP;AACD,CA9BM;AAgCP;;;;;;;;;;AAOO,MAAMS,yBAAyB,GAAIC,MAAD,IAAY;AACnD,QAAM;AAAEC,IAAAA,OAAF;AAAWJ,IAAAA,UAAX;AAAuBK,IAAAA;AAAvB,MAAqCF,MAA3C;;AACA,MAAIC,OAAJ,EAAa;AACX,WAAOJ,UAAU,GAAGV,cAAc,CAAE,QAAOe,SAAU,KAAnB,CAAjB,GAA4Cf,cAAc,CAAE,SAAF,CAA3E;AACD,GAFD,MAEO;AACL,WAAOU,UAAU,GAAGV,cAAc,CAAE,QAAOe,SAAU,EAAnB,CAAjB,GAAyCf,cAAc,CAAE,MAAF,CAAxE;AACD;AACF,CAPM","sourcesContent":["import inquirer from 'inquirer';\r\nimport _ from 'lodash';\r\n\r\nexport const templateRepo = 'https://github.com/song111/easy-template.git';\r\n\r\nexport const templateBranch = {\r\n  base: 'base',\r\n  'base-ts': 'base-ts',\r\n  'base-redux-ts': 'base-redux-ts',\r\n  'base-redux': 'base-redux',\r\n  'base-mobx': 'base-mobx',\r\n  'base-mobx-ts': 'base-mobx-ts'\r\n};\r\n\r\n// 获取输入参数\r\nexport const getTemplateQues = async () => {\r\n  const answers = await inquirer.prompt([\r\n    {\r\n      name: 'isHasTs',\r\n      message: '是否引入Typescript？',\r\n      type: 'confirm'\r\n    },\r\n    {\r\n      name: 'isHasState',\r\n      message: '是否使用状态管理容器？',\r\n      type: 'confirm'\r\n    },\r\n    {\r\n      name: 'stateType',\r\n      when: (answers) => {\r\n        return answers.isHasState;\r\n      },\r\n      message: '请选择状态管理插件',\r\n      type: 'list',\r\n      choices: ['redux', 'mobx']\r\n    },\r\n    {\r\n      name: 'pkgManager',\r\n      message: '选择安装包管理',\r\n      type: 'list',\r\n      choices: ['yarn', 'npm']\r\n    }\r\n  ]);\r\n\r\n  return answers;\r\n};\r\n\r\n/** 获取模版分支\r\n * @param{object} params\r\n *   @param{boolean}  isHasTs 是否用typescript\r\n *   @param{boolean}  isHasState   是否用状态管理器\r\n *   @param{string}   stateType     状态管理器\r\n * */\r\n\r\nexport const getTemplateBranchByParams = (params) => {\r\n  const { isHasTs, isHasState, stateType } = params;\r\n  if (isHasTs) {\r\n    return isHasState ? templateBranch[`base-${stateType}-ts`] : templateBranch[`base-ts`];\r\n  } else {\r\n    return isHasState ? templateBranch[`base-${stateType}`] : templateBranch[`base`];\r\n  }\r\n};\r\n"],"file":"selectTemplate.js"}