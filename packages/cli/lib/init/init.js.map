{"version":3,"sources":["../../src/init/init.js"],"names":["init","cli","argv","targetDir","path","resolve","cwd","name","fs","existsSync","isOverWrite","inquirer","prompt","message","chalk","cyan","type","default","logger","log","remove","templateParams","templateBranch","projectTmpdir","templateRepo","pkgManager","which","sync","nothrow","console"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;AAKA,eAAeA,IAAf,CAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AAC7B,QAAMC,SAAS,GAAGC,cAAKC,OAAL,CAAaJ,GAAG,CAACK,GAAjB,EAAsBJ,IAAI,CAACK,IAA3B,CAAlB,CAD6B,CAG7B;;;AACA,MAAIC,aAAGC,UAAH,CAAcN,SAAd,CAAJ,EAA8B;AAC5B,UAAM;AAAEO,MAAAA;AAAF,QAAkB,MAAMC,kBAASC,MAAT,CAAgB,CAC5C;AACEL,MAAAA,IAAI,EAAE,aADR;AAEEM,MAAAA,OAAO,EAAG,WAAUC,gBAAMC,IAAN,CAAWb,IAAI,CAACK,IAAhB,CAAsB,QAF5C;AAGES,MAAAA,IAAI,EAAE,SAHR;AAIEC,MAAAA,OAAO,EAAE;AAJX,KAD4C,CAAhB,CAA9B;;AAQA,QAAIP,WAAJ,EAAiB;AACfQ,uBAAOC,GAAP,CAAY,UAASL,gBAAMC,IAAN,CAAWZ,SAAX,CAAsB,KAA3C;;AACA,YAAMK,aAAGY,MAAH,CAAUjB,SAAV,CAAN;AACD;AACF,GAjB4B,CAmB7B;;;AACA,QAAMkB,cAAc,GAAG,MAAM,sCAA7B;AACA,QAAMC,cAAc,GAAG,+CAA0BD,cAA1B,CAAvB;AACA,QAAME,aAAa,GAAG,MAAM,4BAAcC,4BAAd,EAA4BF,cAA5B,CAA5B,CAtB6B,CAsB4C;AACzE;;AACA,QAAM,8BAAgBC,aAAhB,EAA+BrB,IAAI,CAACK,IAApC,EAA0CJ,SAA1C,CAAN;AAEA,QAAMsB,UAAU,GACdJ,cAAc,CAACI,UAAf,KAA8B,MAA9B,GAAwCC,eAAMC,IAAN,CAAW,MAAX,EAAmB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAnB,IAAwC,MAAxC,GAAiD,KAAzF,GAAkG,KADpG;AAEA,QAAM,sBAAQH,UAAR,EAAoBtB,SAApB,CAAN;AAEA0B,EAAAA,OAAO,CAACV,GAAR,CAAYE,cAAZ,EAA4BC,cAA5B,EAA4CC,aAA5C;AACD;;eAEcvB,I","sourcesContent":["import path from 'path';\r\nimport inquirer from 'inquirer';\r\nimport which from 'which';\r\nimport { fs, chalk, logger } from '@chrissong/cli-utils';\r\nimport cloneTemplate from './cloneTemplate';\r\nimport generateProject from './generateProject';\r\nimport install from './install';\r\nimport { getTemplateQues, getTemplateBranchByParams, templateRepo } from './selectTemplate';\r\n\r\n/**\r\n * 项目初始化\r\n * @param{object} cli   cli实例对象\r\n * @param{object} argv  命令行参数\r\n */\r\nasync function init(cli, argv) {\r\n  const targetDir = path.resolve(cli.cwd, argv.name);\r\n\r\n  // 项目重复验证\r\n  if (fs.existsSync(targetDir)) {\r\n    const { isOverWrite } = await inquirer.prompt([\r\n      {\r\n        name: 'isOverWrite',\r\n        message: `当前文件夹已存在${chalk.cyan(argv.name)},是否覆盖?`,\r\n        type: 'confirm',\r\n        default: true\r\n      }\r\n    ]);\r\n    if (isOverWrite) {\r\n      logger.log(`\\n删除目录 ${chalk.cyan(targetDir)}...`);\r\n      await fs.remove(targetDir);\r\n    }\r\n  }\r\n\r\n  // 创建本地文件模板\r\n  const templateParams = await getTemplateQues();\r\n  const templateBranch = getTemplateBranchByParams(templateParams);\r\n  const projectTmpdir = await cloneTemplate(templateRepo, templateBranch); //  模版临时文件地址\r\n  // 生成项目\r\n  await generateProject(projectTmpdir, argv.name, targetDir);\r\n\r\n  const pkgManager =\r\n    templateParams.pkgManager === 'yarn' ? (which.sync('yarn', { nothrow: true }) ? 'yarn' : 'npm') : 'npm';\r\n  await install(pkgManager, targetDir);\r\n\r\n  console.log(templateParams, templateBranch, projectTmpdir);\r\n}\r\n\r\nexport default init;\r\n"],"file":"init.js"}