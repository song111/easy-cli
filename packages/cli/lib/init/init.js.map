{"version":3,"sources":["../../src/init/init.js"],"names":["init","cli","argv","targetDir","path","resolve","cwd","name","fs","existsSync","isOverWrite","inquirer","prompt","message","chalk","cyan","type","default","logger","log","remove","templateParams","templateBranch","projectTmpdir","templateRepo","pkgManager","which","sync","nothrow","install","console"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;AAKA,eAAeA,IAAf,CAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AAC7B,QAAMC,SAAS,GAAGC,cAAKC,OAAL,CAAaJ,GAAG,CAACK,GAAjB,EAAsBJ,IAAI,CAACK,IAA3B,CAAlB,CAD6B,CAG7B;;;AACA,MAAIC,aAAGC,UAAH,CAAcN,SAAd,CAAJ,EAA8B;AAC5B,UAAM;AAAEO,MAAAA;AAAF,QAAkB,MAAMC,kBAASC,MAAT,CAAgB,CAC5C;AACEL,MAAAA,IAAI,EAAE,aADR;AAEEM,MAAAA,OAAO,EAAG,WAAUC,gBAAMC,IAAN,CAAWb,IAAI,CAACK,IAAhB,CAAsB,QAF5C;AAGES,MAAAA,IAAI,EAAE,SAHR;AAIEC,MAAAA,OAAO,EAAE;AAJX,KAD4C,CAAhB,CAA9B;;AAQA,QAAIP,WAAJ,EAAiB;AACfQ,MAAAA,MAAM,CAACC,GAAP,CAAY,UAASL,gBAAMC,IAAN,CAAWZ,SAAX,CAAsB,KAA3C;AACA,YAAMK,aAAGY,MAAH,CAAUjB,SAAV,CAAN;AACD;AACF,GAjB4B,CAmB7B;;;AACA,QAAMkB,cAAc,GAAG,MAAM,sCAA7B;AACA,QAAMC,cAAc,GAAG,+CAA0BD,cAA1B,CAAvB;AACA,QAAME,aAAa,GAAG,MAAM,4BAAcC,4BAAd,EAA4BF,cAA5B,CAA5B,CAtB6B,CAsB4C;AACzE;;AACA,QAAM,8BAAgBC,aAAhB,EAA+BrB,IAAI,CAACK,IAApC,EAA0CJ,SAA1C,CAAN;AAEA,QAAMsB,UAAU,GACdJ,cAAc,CAACI,UAAf,KAA8B,MAA9B,GAAwCC,eAAMC,IAAN,CAAW,MAAX,EAAmB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAnB,IAAwC,MAAxC,GAAiD,KAAzF,GAAkG,KADpG;AAEA,QAAMC,OAAO,CAACJ,UAAD,EAAatB,SAAb,CAAb;AAEA2B,EAAAA,OAAO,CAACX,GAAR,CAAYE,cAAZ,EAA4BC,cAA5B,EAA4CC,aAA5C;AACD;;eAEcvB,I","sourcesContent":["import path from 'path';\nimport inquirer from 'inquirer';\nimport which from 'which';\nimport { fs, chalk } from '@chrissong/cli-utils';\nimport cloneTemplate from './cloneTemplate';\nimport generateProject from './generateProject';\nimport { getTemplateQues, getTemplateBranchByParams, templateRepo } from './selectTemplate';\n\n/**\n * 项目初始化\n * @param{object} cli   cli实例对象\n * @param{object} argv  命令行参数\n */\nasync function init(cli, argv) {\n  const targetDir = path.resolve(cli.cwd, argv.name);\n\n  // 项目重复验证\n  if (fs.existsSync(targetDir)) {\n    const { isOverWrite } = await inquirer.prompt([\n      {\n        name: 'isOverWrite',\n        message: `当前文件夹已存在${chalk.cyan(argv.name)},是否覆盖?`,\n        type: 'confirm',\n        default: true\n      }\n    ]);\n    if (isOverWrite) {\n      logger.log(`\\n删除目录 ${chalk.cyan(targetDir)}...`);\n      await fs.remove(targetDir);\n    }\n  }\n\n  // 创建本地文件模板\n  const templateParams = await getTemplateQues();\n  const templateBranch = getTemplateBranchByParams(templateParams);\n  const projectTmpdir = await cloneTemplate(templateRepo, templateBranch); //  模版临时文件地址\n  // 生成项目\n  await generateProject(projectTmpdir, argv.name, targetDir);\n\n  const pkgManager =\n    templateParams.pkgManager === 'yarn' ? (which.sync('yarn', { nothrow: true }) ? 'yarn' : 'npm') : 'npm';\n  await install(pkgManager, targetDir);\n\n  console.log(templateParams, templateBranch, projectTmpdir);\n}\n\nexport default init;\n"],"file":"init.js"}