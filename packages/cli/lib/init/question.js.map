{"version":3,"sources":["../../src/init/question.js"],"names":["templateRepo","templateBranch","base","getTemplateQues","isHasState","isHasTs","inquirer","prompt","name","message","type","stateType","choices","getTemplateBranchByParams","params"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEO,MAAMA,YAAY,GAAG,8CAArB;;AAEA,MAAMC,cAAc,GAAG;AAC5BC,EAAAA,IAAI,EAAE,MADsB;AAE5B,aAAW,SAFiB;AAG5B,mBAAiB,eAHW;AAI5B,gBAAc,YAJc;AAK5B,eAAa,WALe;AAM5B,kBAAgB;AANY,CAAvB;;;AASA,MAAMC,eAAe,GAAG,YAAY;AACzC,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA0B,MAAMC,kBAASC,MAAT,CAAgB,CACpD;AACEC,IAAAA,IAAI,EAAE,SADR;AAEEC,IAAAA,OAAO,EAAE,iBAFX;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADoD,EAMpD;AACEF,IAAAA,IAAI,EAAE,YADR;AAEEC,IAAAA,OAAO,EAAE,aAFX;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANoD,CAAhB,CAAtC;;AAYA,MAAIN,UAAJ,EAAgB;AACd,UAAM;AAAEO,MAAAA;AAAF,QAAgB,MAAML,kBAASC,MAAT,CAAgB,CAC1C;AACEC,MAAAA,IAAI,EAAE,WADR;AAEEC,MAAAA,OAAO,EAAE,WAFX;AAGEC,MAAAA,IAAI,EAAE,MAHR;AAIEE,MAAAA,OAAO,EAAE,CAAC,OAAD,EAAU,MAAV;AAJX,KAD0C,CAAhB,CAA5B;AAQA,WAAO;AAAER,MAAAA,UAAF;AAAcC,MAAAA,OAAd;AAAuBM,MAAAA;AAAvB,KAAP;AACD;;AAED,SAAO;AAAEP,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAP;AACD,CA1BM;;;;AA4BA,MAAMQ,yBAAyB,GAAIC,MAAD,IAAY;AACnD,QAAM;AAAET,IAAAA,OAAF;AAAWD,IAAAA,UAAX;AAAuBO,IAAAA;AAAvB,MAAqCG,MAA3C;;AACA,MAAIT,OAAJ,EAAa;AACX,WAAOD,UAAU,GAAGH,cAAc,CAAE,QAAOU,SAAU,KAAnB,CAAjB,GAA4CV,cAAc,CAAE,SAAF,CAA3E;AACD,GAFD,MAEO;AACL,WAAOG,UAAU,GAAGH,cAAc,CAAE,QAAOU,SAAU,EAAnB,CAAjB,GAAyCV,cAAc,CAAE,MAAF,CAAxE;AACD;AACF,CAPM","sourcesContent":["import inquirer from 'inquirer';\nimport _ from 'lodash';\n\nexport const templateRepo = 'https://github.com/song111/easy-template.git';\n\nexport const templateBranch = {\n  base: 'base',\n  'base-ts': 'base-ts',\n  'base-redux-ts': 'base-redux-ts',\n  'base-redux': 'base-redux',\n  'base-mobx': 'base-mobx',\n  'base-mobx-ts': 'base-mobx-ts'\n};\n\nexport const getTemplateQues = async () => {\n  const { isHasState, isHasTs } = await inquirer.prompt([\n    {\n      name: 'isHasTs',\n      message: '是否引入Typescript？',\n      type: 'confirm'\n    },\n    {\n      name: 'isHasState',\n      message: '是否使用状态管理容器？',\n      type: 'confirm'\n    }\n  ]);\n  if (isHasState) {\n    const { stateType } = await inquirer.prompt([\n      {\n        name: 'stateType',\n        message: '请选择状态管理插件',\n        type: 'list',\n        choices: ['redux', 'mobx']\n      }\n    ]);\n    return { isHasState, isHasTs, stateType };\n  }\n\n  return { isHasState, isHasTs };\n};\n\nexport const getTemplateBranchByParams = (params) => {\n  const { isHasTs, isHasState, stateType } = params;\n  if (isHasTs) {\n    return isHasState ? templateBranch(`base-${stateType}-ts`) : templateBranch(`base-ts`);\n  } else {\n    return isHasState ? templateBranch(`base-${stateType}`) : templateBranch(`base`);\n  }\n};\n"],"file":"question.js"}