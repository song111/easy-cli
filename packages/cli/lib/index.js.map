{"version":3,"sources":["../src/index.js"],"names":["Cli","cwd","argv","plugins","init","commands","root","env","getEnv","pkg","resolvePackages","forEach","plugin","use","Object","keys","process","reduce","key","path","resolve","fs","existsSync","require","err","logger","error","cmd","desc","name","split","test","Error","chalk","redBright","args","yargs","command","length","parse","showHelp","version"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;IAEqBA,G;AACnB,eAAYC,GAAZ,EAA4B;AAAA,QAAXC,IAAW,uEAAJ,EAAI;AAAA;AAC1B,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAe,CAACC,gBAAD,CAAf;AACA,SAAKC,QAAL,GAAgB,EAAhB,CAJ0B,CAIN;;AACpB,SAAKD,IAAL;AACD,G,CAED;;;;;2BACO;AAAA;;AACL,WAAKE,IAAL,GAAY,wBAAS,KAAKL,GAAd,CAAZ;AACA,WAAKM,GAAL,GAAW,KAAKC,MAAL,EAAX;AACA,WAAKC,GAAL,GAAW,KAAKC,eAAL,EAAX;AACA,WAAKP,OAAL,CAAaQ,OAAb,CAAqB,UAACC,MAAD;AAAA,eAAY,KAAI,CAACC,GAAL,CAASD,MAAT,CAAZ;AAAA,OAArB;AACD;AAED;;;;;;;AAQA;;;6BAGS;AACP;AACA,aAAOE,MAAM,CAACC,IAAP,CAAYC,OAAO,CAACT,GAApB,EAAyBU,MAAzB,CAAgC,UAACV,GAAD,EAAMW,GAAN,EAAc;AACnDX,QAAAA,GAAG,CAACW,GAAD,CAAH,GAAWF,OAAO,CAACT,GAAR,CAAYW,GAAZ,CAAX;AACA,eAAOX,GAAP;AACD,OAHM,EAGJ,EAHI,CAAP;AAID;AAED;;;;;;;wBAKIK,M,EAAQ;AACVA,MAAAA,MAAM,CAAC,IAAD,CAAN;AACD;AAED;;;;;;sCAGkB;AAChB,UAAMH,GAAG,GAAGU,iBAAKC,OAAL,CAAa,KAAKd,IAAlB,EAAwB,cAAxB,CAAZ;;AACA,UAAI,CAACe,eAAGC,UAAH,CAAcb,GAAd,CAAL,EAAyB,OAAO,EAAP;;AACzB,UAAI;AACF,eAAOc,OAAO,CAACd,GAAD,CAAd;AACD,OAFD,CAEE,OAAOe,GAAP,EAAY;AACZC,yBAAOC,KAAP,uBAAkBjB,GAAlB;;AACA,eAAO,EAAP;AACD;AACF;AAED;;;;;;;;;6BAMSkB,G,EAAKC,I,EAAe;AAC3B,UAAMC,IAAI,GAAGF,GAAG,CAACG,KAAJ,CAAU,KAAV,EAAiB,CAAjB,CAAb;;AAEA,UAAI,CAAC,WAAWC,IAAX,CAAgBF,IAAhB,CAAL,EAA4B;AAC1B;AACA,cAAM,IAAIG,KAAJ,oCAAkBC,gBAAMC,SAAN,CAAgBL,IAAhB,CAAlB,yHAAN;AACD;;AAED,UAAI,CAACD,IAAL,EAAW,MAAM,IAAII,KAAJ,CAAU,eAAV,CAAN;AACX,UAAI,KAAK3B,QAAL,CAAcwB,IAAd,CAAJ,EAAyB,MAAM,IAAIG,KAAJ,wBAAgBC,gBAAMC,SAAN,CAAgBL,IAAhB,CAAhB,qCAAN;;AATE,wCAANM,IAAM;AAANA,QAAAA,IAAM;AAAA;;AAU3B,WAAK9B,QAAL,CAAcwB,IAAd;AAAwBF,QAAAA,GAAG,EAAHA,GAAxB;AAA6BC,QAAAA,IAAI,EAAJA;AAA7B,SAAsCO,IAAtC;;AACAC,wBAAMC,OAAN,2BAAcV,GAAd,EAAmBC,IAAnB,SAA4BO,IAA5B;AACD;AAED;;;;;;;0BAIMjC,I,EAAM;AACV,WAAKA,IAAL,GAAYA,IAAZ;;AACA,UAAI,KAAKA,IAAL,CAAUoC,MAAd,EAAsB;AACpBF,0BAAMG,KAAN,CAAY,KAAKrC,IAAjB;AACD,OAFD,MAEO;AACLkC,0BAAMI,QAAN;AACD;AACF;;;wBArEa;AACZ,aAAO,KAAK/B,GAAL,CAASgC,OAAhB;AACD","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport yargs from 'yargs';\nimport { logger, findRoot, chalk } from '@chrissong/cli-utils';\nimport init from './init';\n\nexport default class Cli {\n  constructor(cwd, argv = []) {\n    this.cwd = cwd;\n    this.argv = argv;\n    this.plugins = [init];\n    this.commands = {}; // 命令集合\n    this.init();\n  }\n\n  // 初始化\n  init() {\n    this.root = findRoot(this.cwd);\n    this.env = this.getEnv();\n    this.pkg = this.resolvePackages();\n    this.plugins.forEach((plugin) => this.use(plugin));\n  }\n\n  /**\n   * 版本信息\n   */\n\n  get version() {\n    return this.pkg.version;\n  }\n\n  /**\n   * 获取当前环境的环境变量\n   */\n  getEnv() {\n    debugger;\n    return Object.keys(process.env).reduce((env, key) => {\n      env[key] = process.env[key];\n      return env;\n    }, {});\n  }\n\n  /**\n   * 使用插件 注入cli 实例\n   * @param {Function} plugin\n   */\n\n  use(plugin) {\n    plugin(this);\n  }\n\n  /**\n   * 获取package.json信息\n   */\n  resolvePackages() {\n    const pkg = path.resolve(this.root, 'package.json');\n    if (!fs.existsSync(pkg)) return {};\n    try {\n      return require(pkg);\n    } catch (err) {\n      logger.error(`读取${pkg}失败！`);\n      return {};\n    }\n  }\n\n  /**\n   * 注册命令\n   * @param {String} cmd\n   * @param {String} desc\n   * @param  {...any} args\n   */\n  register(cmd, desc, ...args) {\n    const name = cmd.split(/\\s+/)[0];\n\n    if (!/^[\\w:]+$/.test(name)) {\n      // 只能有数字、字母、下划线、冒号组成\n      throw new Error(`命令名称 ${chalk.redBright(name)} 不合法，只能是字母、数字、下划线、冒号`);\n    }\n\n    if (!desc) throw new Error('命令描述 desc 不存在');\n    if (this.commands[name]) throw new Error(`命令 ${chalk.redBright(name)} 已经被占用`);\n    this.commands[name] = { cmd, desc, ...args };\n    yargs.command(cmd, desc, ...args);\n  }\n\n  /**\n   * 解析命令行参数\n   * @param {Array} argv\n   */\n  parse(argv) {\n    this.argv = argv;\n    if (this.argv.length) {\n      yargs.parse(this.argv);\n    } else {\n      yargs.showHelp();\n    }\n  }\n}\n"],"file":"index.js"}