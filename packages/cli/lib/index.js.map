{"version":3,"sources":["../src/index.js"],"names":["Cli","constructor","cwd","argv","plugins","init","start","build","commands","subprocess","root","env","getEnv","pkg","resolvePackages","forEach","plugin","use","version","fork","path","options","execArgv","process","debugPort","on","index","findIndex","item","splice","push","exit","code","subPIds","map","subp","pid","force","tree","Object","keys","reduce","key","resolve","fs","existsSync","require","err","logger","error","register","cmd","desc","args","name","split","test","Error","chalk","redBright","yargs","command","parse","length","showHelp"],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport yargs from 'yargs';\nimport fkill from 'fkill';\nimport { fork } from 'child_process';\nimport { logger, findRoot, chalk } from '@chrissong/cli-utils';\nimport init from './init';\nimport start from './start';\nimport build from './build'\n\nexport default class Cli {\n  constructor (cwd, argv = []) {\n    this.cwd = cwd;\n    this.argv = argv;\n    this.plugins = [init, start, build];\n    this.commands = {}; // 命令集合\n    this.subprocess = []; // 子进程\n    this.init();\n  }\n\n  // 初始化\n  init () {\n    this.root = findRoot(this.cwd);\n    this.env = this.getEnv();\n    this.pkg = this.resolvePackages();\n    this.plugins.forEach((plugin) => this.use(plugin));\n  }\n\n  /**\n   * 版本信息\n   */\n\n  get version () {\n    return this.pkg.version;\n  }\n\n  /**\n   * 子进程执行脚本\n   * @param {String} path\n   * @param  {String[]} argv\n   * @param  {Object} options\n   */\n  fork (path, argv, options) {\n    const subprocess = fork(path, argv, {\n      env: this.env, // 子进程继承当前环境的环境变量\n      execArgv: [`--inspect-brk=127.0.0.1:${process.debugPort + 1}`], // 开发模式\n      ...options\n    });\n\n    subprocess.on('close', () => {\n      const index = this.subprocess.findIndex((item) => item === subprocess);\n      this.subprocess.splice(index, 1);\n    });\n\n    this.subprocess.push(subprocess);\n    return subprocess;\n  }\n\n  /**\n   * 退出进程\n   * @param {Number} code\n   **/\n  async exit (code) {\n    const subPIds = this.subprocess.map((subp) => subp.pid);\n    await fkill(subPIds, { force: true, tree: true });\n    process.exit(code);\n  }\n\n  /**\n   * 获取当前环境的环境变量\n   */\n  getEnv () {\n    return Object.keys(process.env).reduce((env, key) => {\n      env[key] = process.env[key];\n      return env;\n    }, {});\n  }\n\n  /**\n   * 使用插件 注入cli 实例\n   * @param {Function} plugin\n   */\n\n  use (plugin) {\n    plugin(this);\n  }\n\n  /**\n   * 获取package.json信息\n   */\n  resolvePackages () {\n    const pkg = path.resolve(this.root, 'package.json');\n    if (!fs.existsSync(pkg)) return {};\n    try {\n      return require(pkg);\n    } catch (err) {\n      logger.error(`读取${pkg}失败！`);\n      return {};\n    }\n  }\n\n  /**\n   * 注册命令\n   * @param {String} cmd\n   * @param {String} desc\n   * @param  {...any} args\n   */\n  register (cmd, desc, ...args) {\n    const name = cmd.split(/\\s+/)[0];\n\n    if (!/^[\\w:]+$/.test(name)) {\n      // 只能有数字、字母、下划线、冒号组成\n      throw new Error(`命令名称 ${chalk.redBright(name)} 不合法，只能是字母、数字、下划线、冒号`);\n    }\n\n    if (!desc) throw new Error('命令描述 desc 不存在');\n    if (this.commands[name]) throw new Error(`命令 ${chalk.redBright(name)} 已经被占用`);\n    this.commands[name] = { cmd, desc, ...args };\n    yargs.command(cmd, desc, ...args);\n  }\n\n  /**\n   * 解析命令行参数\n   * @param {Array} argv\n   */\n  parse (argv) {\n    this.argv = argv;\n    if (this.argv.length) {\n      yargs.parse(this.argv);\n    } else {\n      yargs.showHelp();\n    }\n  }\n}\n"],"file":"index.js"}